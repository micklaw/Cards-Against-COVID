@inherits FluxorComponent
@inject IState<GameState> GameState
@inject IDispatcher Dispatcher

<div class="mt-2">
    @if (GameState.Value.CurrentPlayer != null)
    {
        @if (GameState.Value.CurrentPlayer.Cards != null && GameState.Value.CurrentPlayer.Cards.Any())
        {
            <ul class="list-unstyled justify-content-center">
                @foreach (var response in GameState.Value.CurrentPlayer.Cards.Select((i, v) => new { Item = i, Index = v }))
                {
                    <li class="response-list">
                        <Card Type="CardType.Response" Text="@response.Item"></Card>

                        <form>
                            <div class="form-group">
                                @if (!GameState.Value.CurrentResponses.Contains(response.Index) && !SelectedResponses.Contains(response.Index))
                                {
                                    <button type="button" class="btn btn-sm btn-primary" @onclick="(e) => Toggle(e, response.Index)">Select</button>
                                    <button type="button" class="btn btn-sm btn-primary" @onclick="(e) => Replace(e, response.Index)">Replace</button>
                                }
                                else if (SelectedResponses.Contains(response.Index))
                                {
                                    <button type="button" class="btn btn-sm btn-warning" @onclick="(e) => Toggle(e, response.Index)">Undo</button>
                                }
                                else
                                {
                                    <button type="button" class="btn btn-sm btn-info" disabled="disabled">Played</button>
                                }
                            </div>
                        </form>
                    </li>
                }
            </ul>
        }

        @if (!GameState.Value.CurrentResponses.Any() && !SelectedResponses.Any())
        {
            <p><i>Replace all cards?</i></p>
            <form>
                <div class="form-group">
                    <button type="button" class="btn btn-primary" @onclick="ReplaceAll">Replace all</button>
                </div>
            </form>
        }
        else if (GameState.Value.CurrentResponses.Any() && !SelectedResponses.Any())
        {
            <form>
                <div class="form-group">
                    <button type="button" class="btn btn-primary" @onclick="ResetResponse">Reset response</button>
                </div>
            </form>
        }
        else if (SelectedResponses.Any())
        {
            <form>
                <div class="form-group">
                    <button type="button" class="btn btn-primary" @onclick="Response">Respond</button>
                </div>
            </form>
        }

    }
    else
    {
        <p>You nosey bastard you!</p>
        <form>
            <div class="form-group">
                <a href="/">Away and find some of your own mates</a>
            </div>
        </form>
    }
</div>

@code
{
    private readonly List<int> SelectedResponses = new List<int>();

    private void Toggle(MouseEventArgs obj, int count)
    {
        if (SelectedResponses.Contains(count))
        {
            SelectedResponses.Remove(count);
        }
        else
        {
            SelectedResponses.Add(count);
        }
    }

    private void Replace(MouseEventArgs mouseEventArgs, int count)
    {
        Dispatcher.Dispatch(new ReplacePlayerCardAction(
            GameState.Value.Game.Url,
            GameState.Value.CurrentPlayer.Id,
            count));
    }

    private void ReplaceAll(MouseEventArgs mouseEventArgs)
    {
        Dispatcher.Dispatch(new PlayerShuffleCardsAction(
            GameState.Value.Game.Url,
            GameState.Value.CurrentPlayer.Id));
    }

    private void Response(MouseEventArgs obj)
    {
        Dispatcher.Dispatch(new RoundRespondAction(
            GameState.Value.Game.Url,
            GameState.Value.CurrentPlayer.Id,
            SelectedResponses));

        SelectedResponses.Clear();
    }

    private void ResetResponse(MouseEventArgs obj)
    {
        Dispatcher.Dispatch(new RoundRespondAction(
            GameState.Value.Game.Url,
            GameState.Value.CurrentPlayer.Id,
            SelectedResponses));
    }
}
