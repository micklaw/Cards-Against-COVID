@inherits FluxorComponent
@inject IState<GameState> GameState
@inject IDispatcher Dispatcher

@if (GameState.Value.Game.CurrentRound != null)
{
    <div class="mt-2">
        <Card Type="CardType.Prompt" Text="@GameState.Value.Game.CurrentRound.Prompt"></Card>
    </div>

    @if (ViewingResponses != null && ViewingResponses.Any())
    {
        <ul class="list-unstyled justify-content-center mt-1">
            @foreach (var response in ViewingResponses)
            {
                <li class="response-list">
                    <Card Type="CardType.Response" Text="@response"></Card>

                    <div class="invisible">
                        .
                    </div>
                </li>
            }
        </ul>

        <p><button type="button" class="btn btn-primary mb-3" @onclick="CloseResponses">Close</button></p>
    }

    @if (GameState.Value.PartOfCurrentGame)
    {
        <p><i>Don't fancy this prompt?</i></p>
        <form>
            <div class="form-group">
                <button type="button" class="btn btn-primary" @onclick="NewPrompt">Choose another</button>
                <button type="button" class="btn btn-primary" @onclick="NewRound">Start again</button>
            </div>
        </form>
    }

    <h5 class="font-weight-bold">Votes</h5>

    @if (GameState.Value.Game.CurrentRound.HasResponses)
    {
        <table class="table table-sm table-dark">
            <thead>
                <tr>
                    <th>Name</th>
                    <th class="text-right">Votes</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var response in GameState.Value.Game.CurrentRound.Responses)
                {
                    <tr>
                        <td>@GameState.Value.GetPlayerName(response.PlayerId, true)</td>
                        <td class="text-right">@GameState.Value.GetCurrentRoundPlayerVotes(response.PlayerId)</td>
                        <td>
                            <div class="float-right">
                                <button type="button" class="btn btn-sm btn-primary" @onclick="(e) => ViewResponses(e, response.PlayerId, response.Responses)">View</button>
                                @if (GameState.Value.PartOfCurrentGame && !GameState.Value.HasVoted)
                                {
                                    <button type="button" class="btn btn-sm btn-primary" @onclick="(e) => Vote(e, response.PlayerId, GameState.Value.CurrentPlayer.Id)">Vote</button>
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @if (GameState.Value.PartOfCurrentGame)
        {
            <form>
                <div class="form-group">
                    @if (!GameState.Value.Game.CurrentRound.IsWon && GameState.Value.Game.CurrentRound.HasResponses)
                    {
                        <button type="button" class="btn btn-primary" @onclick="Reveal">Show winner</button>
                    }
                    @if (GameState.Value.Game.CurrentRound.IsWon)
                    {
                        <button type="button" class="btn btn-primary" @onclick="Next">Next round</button>
                    }
                </div>
            </form>
        }
    }
    else
    {
        <p>No responses yet, hurry up</p>
    }
}
else
{
    <p>No fun has begun</p>

    @if (GameState.Value.PartOfCurrentGame)
    {
        <form>
            <div class="form-group">
                <button type="button" class="btn btn-primary" @onclick="NewRound">New Round</button>
            </div>
        </form>
    }
}

@code
{
    public List<string> ViewingResponses { get; set; } = new List<string>();
    public string ViewingResponsesPlayerName { get; set; }

    private void CloseResponses(MouseEventArgs e)
    {
        ViewingResponses = new List<string>();
    }

    private void ViewResponses(MouseEventArgs e, int playerId, IList<int> responses)
    {
        var cards = GameState.Value.Game.Players.FirstOrDefault(i => i.Id == playerId)?.Cards?.ToArray();
        ViewingResponses = new List<string>();
        ViewingResponsesPlayerName = GameState.Value.GetPlayerName(playerId, true);

        if (cards == null)
        {
            StateHasChanged();
            return;
        }

        foreach (var index in responses)
        {
            if (cards.Length < (index))
            {
                continue;
            }

            ViewingResponses.Add(cards[index]);
        }

        StateHasChanged();
    }

    private void NewRound(MouseEventArgs mouseEventArgs)
    {
        Dispatcher.Dispatch(new NewRoundAction(GameState.Value.Game.Url));
    }

    private void NewPrompt(MouseEventArgs obj)
    {
        Dispatcher.Dispatch(new NewRoundPromptAction(GameState.Value.Game.Url));
    }

    private void Reveal(MouseEventArgs obj)
    {
        Dispatcher.Dispatch(new RoundRevealAction(GameState.Value.Game.Url));
    }

    private void Next(MouseEventArgs obj)
    {
        Dispatcher.Dispatch(new NextRoundAction(GameState.Value.Game.Url));
    }

    private void Vote(MouseEventArgs mouseEventArgs, in int responsePlayerId, in int currentPlayerId)
    {
        Dispatcher.Dispatch(new RoundVoteAction(GameState.Value.Game.Url, currentPlayerId, responsePlayerId));
    }
}
