@using System.ComponentModel
@using Game = CardsAgainstHumanity.UI.Pages.Game
@inherits FluxorComponent
@inject IState<GameState> GameState
@inject IDispatcher Dispatcher

<h5 class="font-weight-bold">Rounds</h5>
<p>@GameState.Value.RoundCount</p>

<h5 class="font-weight-bold">Scores</h5>
@if (GameState.Value.Game.Players != null && GameState.Value.Game.Players.Any())
{
    <table class="table table-sm table-dark">
        <thead>
            <tr>
                <th>Name</th>
                <th class="text-right">Score</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var player in GameState.Value.Game.Players)
            {
                var score = GameState.Value.Game?.Score?.FirstOrDefault(i => i.Key == player.Id).Value ?? 0;

                <tr>
                    <td>@player.Name</td>
                    <td class="text-right">@score</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No players have joined... yet</p>
}

@if (!GameState.Value.Game.IsOver)
{
    <h5 class="font-weight-bold">Actions</h5>
    <form class="mt-2">
        @if (GameState.Value.Game.IsOpen && !GameState.Value.PartOfCurrentGame)
        {
            <div class="form-group">
                <div class="input-group">
                    <input type="text" class="form-control" @bind="@PlayerName" placeholder="Your name... is shit" aria-label="">
                    <div class="input-group-append">
                        <button class="btn btn-primary" type="button" @onclick="AddPlayer">Join game <span class="iconify" data-icon="oi:account-login" data-inline="false"></span></button>
                    </div>
                </div>
            </div>
        }
        else if (GameState.Value.Game.IsOpen && GameState.Value.PartOfCurrentGame)
        {
            <div class="alert alert-primary mt-2" role="alert">
                Currently playing as <strong>@GameState.Value.CurrentPlayer.Name</strong>.
            </div>
        }
        <div class="form-group mt-2">
            @if (!GameState.Value.Game.IsOpen)
            {
                <button type="button" class="btn btn-success" @onclick="Open">Open the game <span class="iconify" data-icon="oi:lock-unlocked" data-inline="false"></span></button>
            }
            else
            {
                <button type="button" class="btn btn-danger" @onclick="Close">Shut the game <span class="iconify" data-icon="oi:lock-locked" data-inline="false"></span></button>
            }
            <button type="button" class="btn btn-primary" @onclick="Finish">End game</button>
        </div>
    </form>
}
else
{
    if (GameState.Value.OverallWinner == null)
    {
        <div class="alert alert-primary mt-3" role="alert">
            Game over!, glory belongs too no-one, because you all suck.<strong></strong> .
        </div>
    }
    else
    {
        <div class="alert alert-primary mt-3" role="alert">
            Game over!, glory belongs too <strong>@GameState.Value.OverallWinner.Name</strong> .
        </div>
    }
}

@code {
    public string PlayerName { get; set; }

    private void AddPlayer(MouseEventArgs obj)
    {
        if (string.IsNullOrWhiteSpace(PlayerName))
        {
            return;
        }

        Dispatcher.Dispatch(new PlayerAddAction(GameState.Value.Game.Url, PlayerName));

        PlayerName = null;
    }

    private void Open(MouseEventArgs obj)
    {
        Dispatcher.Dispatch(new OpenGameAction(GameState.Value.Game.Url));
    }

    private void Close(MouseEventArgs obj)
    {
        Dispatcher.Dispatch(new CloseGameAction(GameState.Value.Game.Url));
    }

    private void Finish(MouseEventArgs obj)
    {
        Dispatcher.Dispatch(new FinishGameAction(GameState.Value.Game.Url));
    }
}