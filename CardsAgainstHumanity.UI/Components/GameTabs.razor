@inherits FluxorComponent
@inject IState<GameState> GameState

<header class="masthead mb-auto">
    <div class="inner">
        <h3 class="masthead-brand">@GameState.Value.Game.Name</h3>
        <nav class="nav nav-masthead justify-content-center">
            @foreach (var tab in Tabs)
            {
                @if (tab.Tab == Tab.Cards && (!GameState.Value.PartOfCurrentGame || GameState.Value.Game.IsOver))
                {
                    continue;
                }
                @if (tab.Tab == Tab.Round && GameState.Value.Game.IsOver)
                {
                    continue;
                }
                <a class="nav-link @((tab.Active ? "active" : string.Empty))" @onclick="@(() => Toggle(tab))">@tab.Title</a>
            }
            <a class="nav-link" href="/">New</a>
        </nav>
    </div>
</header>

<main role="main" class="inner cover">
    @foreach (var tab in Tabs)
    {
        <GameTab Tab="@tab.Tab" ClassName="@((tab.Active ? string.Empty : "d-none"))">
            @switch (tab.Tab)
            {
                case Tab.Stats:
                    <StatsTab></StatsTab>
                    break;
                case Tab.Round:
                    <RoundTab></RoundTab>
                    break;
                case Tab.Cards:
                    <CardsTab></CardsTab>
                    break;
            }
        </GameTab>
    }
</main>

@code {
    public List<NavTab> Tabs = new List<NavTab>
{
        new NavTab{ Tab = Tab.Stats, Title = "Stats", Active = true },
        new NavTab{ Tab = Tab.Round, Title = "Round" },
        new NavTab{ Tab = Tab.Cards, Title = "Cards" }
    };

    public void Toggle(NavTab tab)
    {
        Tabs.ForEach(loopTab =>
        {
            loopTab.Active = false;
        });

        tab.Active = true;

        StateHasChanged();
    }

    public class NavTab
    {
        public Tab Tab { get; set; }

        public string Title { get; set; }

        public bool Active { get; set; }
    }
}
