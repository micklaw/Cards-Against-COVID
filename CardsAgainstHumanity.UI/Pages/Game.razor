@page "/game/{instance}"
@using System.Timers
@inherits FluxorComponent
@inject IState<GameState> GameState
@inject IDispatcher Dispatcher
@inject IConfiguration Config

@if (GameState?.Value?.Game != null)
{
    <GameTabs></GameTabs>
}
else
{
    <div class="aligner">
        <main role="main" class="inner cover">
            <span class="blink">Loading @if(GameState.Value.Fetching) { <span class="blink">.</span> }</span>
        </main>
    </div>
}

@code
{
    private Timer Timer { get; set; }

    [Parameter]
    public string Instance { get; set; }

    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        if (GameState.Value.Game == null)
        {
            Dispatcher.Dispatch(new ReadGameAction(Instance));
        }

        Timer = new Timer(5000);

        Timer.Elapsed += (sender, args) =>
        {
            if (GameState.Value.Fetching)
            {
                return;
            }

            Dispatcher.Dispatch(new ReadGameAction(Instance));
        };

        Timer.Start();

        var apiUrl = Config["apiUri"];

        hubConnection = new HubConnectionBuilder()
            .WithUrl(apiUrl, options =>
            {
                options.Transports = HttpTransportType.LongPolling;
                options.DefaultTransferFormat = TransferFormat.Text;
            })
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string>("gameUpdated", (gameData) =>
        {
            if (GameState.Value.Fetching)
            {
                return;
            }

            Dispatcher.Dispatch(new ReadGameAction(Instance));
        });

        await hubConnection.StartAsync();

        Dispatcher.Dispatch(new ConnectToGameGroupAction(Instance, hubConnection.ConnectionId));
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            Timer.Stop();
            Timer.Dispose();
        }
    }
}
 